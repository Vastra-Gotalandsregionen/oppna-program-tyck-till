#summary Introduktion till Tyck till-applikationen.
#labels Featured

= Innehåll = 

<wiki:toc max_depth="3" />

= Introduktion =
Tyck Till är en applikation för att skicka felrapporter samt övrig feedback. Den används för att hantera felrapporter och övrig feedback i portalen. Felrapporterna skickas vidare till mål(idag USD, PivotalTracker eller EMail) beroende på konfiguration.

Applikationen bygger på ett formulär imlementerat enligt standarden [http://www.w3.org/TR/xforms/ XForms]. Som implementation av XForms används open source-produkten [http://www.orbeon.com Orbeon]. Se [http://code.google.com/p/oppna-program/wiki/Anvisningar_Anslutningsskikt_formularhantering_XForms referensarkitekturens anvisningar] för mer information om hur XForms och Orbeon skall användas.

= Systemöversikt = 

Nuvarande beta-version av Orbeon har inte gått att köra varken på !WebSphere Portal 6.1 eller LifeRay 5.2.3. Därför kör vi Tyck till som en webapplikation på Tomcat tills vidare. Webbapplikationen är sedan inlänkad i portalen via en IFrame. Maven-modulen tyck-till-test-portlet innehåller en demo portlet, som genererar ett fel och länkar tillTyck till-formuläret via en IFrame. Portletten fångar information om vilken användare som är inloggad och skickar med till webapplikationen, vilket behövs för att fylla i default-värden på kontaktuppgifterna i formuläret. 

Test-portlet-modulen innehåller en enkelt testportlet som är till för att testa portletfiltret, som öppnar upp felformuläret i ett popupfönster. Filtret fångar både information om felet som uppstått samt om vilken användare som var inloggad. 

Båda portlettarna har en inställning i portlet.xml där urlen till formläret i webbapplikationen pekas ut. 
 
== Orbeon-konfiguration ==

Tyck till kör _separat deployment_ av Orbeon enligt instruktionerna som återfinns [http://www.orbeon.com/ops/doc/reference-xforms-java här]. Orbeon.war har döpts om till orbeon-3.7.0.war och deployats på Tomcat - detta för att man ska kunna köra flera olika versioner samtidigt.

Observera att filterklassen är felaktigt namngiven i Orbeon-dokumentationen ovan. För orbeon-3.7.0beta1 ska det vara (se web.xml i core-bc/modules/web modulen): 
{{{
<filter-name>orbeon-xforms-filter</filter-name>
  	<filter-class>org.orbeon.oxf.servlet.OPSXFormsFilter</filter-class>
  	<init-param>
  		<param-name>oxf.xforms.renderer.context</param-name>
  		<param-value>/orbeon</param-value>
  	</init-param>
</filter>
}}}

Cross-context-setup (enligt Orbeon-dokumentationen ovan) har satts genom en context.xml fil under META-INF-katalogen i core-bc/modules/web modulen. 

= Sätta upp sin lokala utvecklingsmiljö =

För att utveckla och köra projektet lokalt används referensarkitekturens utvecklingsmiljö. Börja därför med att sätta upp utvecklingsmiljön enligt [http://code.google.com/p/oppna-program/wiki/Anvisningar_Utvecklingsmiljo referensarkitekturens instruktioner]. Se [http://code.google.com/p/oppna-program-tyck-till/source/checkout Source] för information om hur du checkar ut källkoden. 

== Installation av Orbeon ==

Ladda hem Orbeon 3.7.0_beta1 från http://forge.ow2.org/project/showfiles.php?group_id=168. 

Packa upp distributionen till en temporär katalog. Gå till Eclipse. Välj import->war-file. Peka ut orbeon.war som ligger i roten på orbeon-distributionen. Använd defaultinställningar. 

Välj refactor->rename på projektet. Döp om det till "orbeon-3.7.0".

Deploya orbeon-3.7.0 på Tomcat via Eclipse (genom att välja _Add and remove projects_ på servern).  

== Deploy av web-projektet ==

Deploya även /tyck-till-core-bc-module-web-projektet i Tomcat från Eclipse. Formuläret deployas default på `http://<Tomcat URL>/tyck-till-core-bc-module-web/xforms-jsp/index.jsp`. 


== Testa portlets lokalt ==

Tyck till innehåller två portlets. Maven-modulen core-bc/module/portlet innehåller produktionsportletten, som länkar in tyck-till-formuläret i en IFrame. Test-portlet-modulen innehåller en enkelt testportlet som är till för att kasta exceptions och testa Portletfiltret, som i sin tur öppnar upp felformuläret i ett popupfönster. Båda portlettarna har en inställning i portlet.xml där urlen till formläret pekas ut. Denna inställning behöver ändras beroende på vilken miljö man vill köra mot. 

För att testa/utveckla dessa lokalt har !OpenPortlet Container på Glassfish använts. Se [http://oppna-program.googlecode.com/svn/reference-architecture/trunk/docs/Teknisk_arkitektur/Systemutveckling/JavaEE/Anvisningar_Anslutningsskikt_Portlet.doc referensarkitekturens anvisningar för portlets] för mer information om utveckling av JSR 286-portlets och hur installationen av !OpenPortlet Container och Glassfish går till.

=== Deploy av portlets till !OpenPortlet Container === 

Starta Glassfish. Gå därefter till http://localhost:8080/portletdriver/admin. Välj tyck-till-portlet.war och tryck på Deploy. Gå därefter till Portlets-fliken där default-portletfönstret automatiskt har uppdaterats med tyck-till-portleten.

Gör på samma vis för att deploya tyck-till-test-portlet.war. 

= Att skapa en release på google code =

Att skapa en release: 

  * Kopiera från trunk till tag
{{{ 
svn copy -m "Taging for release"  https://oppna-program-tyck-till.googlecode.com/svn/trunk/ 
https://oppna-program-tyck-till.googlecode.com/svn/tags/<release version>
}}}
  * Checka ut tagen
{{{
svn co https://oppna-program-tyck-till.googlecode.com/svn/tags/<release version>
}}}
  * Stega up versionen i trunk (ändra version i alla pom-filer). Not: Om det är en milestone eller release candidate som releasas så behövs ej detta - då ska trunk ligga kvar på SNAPSHOT.
  * Gör commit på trunk (om versionen har stegats upp):
{{{
svn -m "Increasing version for new development in trunk" commit
}}}
  * Ändra versionen i alla pom-filer under tagen 
  * Gör commit på tagen:
{{{
svn -m "Setting version for release of <release version>" commit
}}}
  * Kontrollera så att googleCode-svn-serverns användarnamn och lösenord stämmer i mavenfilen $USER_HOME/.m2/settings.xml (se exempel [http://oppna-program.googlecode.com/svn/reference-architecture/trunk/src/tools/maven-settings/settings.xml här]). 
  * Kör sedan maven deploy i katalogen /tags/<release version>/ för att deploya maven-artefakterna till [https://oppna-program-tyck-till.googlecode.com/svn/maven maven-repot] (TODO: ev bör detta köras av byggservern):
{{{
mvn deploy
}}}
  * Samla ihop alla filer, inkl dokument, och skapa en src-download: 
    * Kör `maven clean` för att ta bort alla target-folders.
    * Kör `maven eclipse:clean` för att ta bort alla eclipse-filer.
    * Ta bort alla svn-foldrar, t ex (på Linux/Mac) med `find . -type d -name '*.svn' -print0 | xargs -0 rm -rdf`. 
    * Zippa ihop och lägg upp filen under downloads. 
  * Not: För icke-bakåtkompatibla releaser (major-versioner) kan vissa wiki-sidor behöva sparas i enlighet med den tidigare versionen. Detta får bedömas från fall till fall. 
  * Not: Om en separat branch skulle behövas, t ex för buggfixar görs detta vid behov (dvs när första buggen skall fixas) genom att kopiera från tags till branches:
{{{ 
svn copy -m "Branching release"  https://oppna-program-tyck-till.googlecode.com/svn/tags/<release version> 
https://oppna-program-tyck-till.googlecode.com/svn/branches/<release version>
}}} 